name: Run Farm Android UI tests

on:
  workflow_call:
    inputs:
      branch:
        description: "Branch to checkout"
        type: string
        required: false
        default: ""
      marathon_path:
        description: "Marathon path to run e.g. ptt/ptt_app"
        type: string
        required: true
      is_gradle_cache_debug_enabled:
        description: "Enable or disable Gradle build cache"
        type: boolean
        default: true
        required: false
      uploaded_artifact_name:
        type: string
        required: false
        default: false
      upload_test_results:
        description: "Uploads test results to be able to use them from outer jobs. If specified, uploaded aritfacts will be stored in $uploaded_artifact_name folder"
        type: boolean
        required: false
        default: false
      assemble_task:
        type: string
        default: "assembleDebug"
        required: false
        description: "Gradle task to build target app APK"
      assemble_android_test_task:
        type: string
        default: "assembleDebugAndroidTest"
        required: false
        description: "Gradle task to build target AndroidTest APK"
      marathon_clear_package_data:
        type: boolean
        required: false
        default: true
      marathon_only_record_snapshots:
        type: boolean
        required: false
        default: false
      allure_project_id:
        type: string
        required: false
      send_alert_to_tg:
        type: boolean
        required: false
        default: false
    secrets:
      github_access_token:
        required: true
      ssh_private_key:
        required: false
      maven_readonly_token:
        required: true
      firebase_key:
        required: true
      telemetry_url:
        required: false
      telemetry_slug:
        required: false
      allure_token:
        required: false
      tg_chat_id:
        required: false
      tg_thread_id:
        required: false
      tg_release_token_id:
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.uploaded_artifact_name }}
  cancel-in-progress: true

jobs:
  run_ui_tests:
    runs-on: tutu-mac-builder
    outputs:
      test_status: ${{ steps.allure_send_report.outputs.test_status }}
      hours: ${{ steps.runtime.outputs.hours }}
      minutes: ${{ steps.runtime.outputs.minutes }}
      launch_id: ${{ steps.allure_send_report.outputs.launch_id }}
    defaults:
      run:
        shell: bash -leo pipefail {0}
    steps:
      - name: Start measuring job duration
        id: pipeline_start_date
        uses: tutu-ru-mobile/github-workflows/action_get_current_date@main

      - name: Get checkout branch
        run: |
          if [ ${{ inputs.branch == '' }} ] 
          then
            CHECKOUT_BRANCH=${{ github.ref }};
          else
            CHECKOUT_BRANCH=${{ inputs.branch }};
          fi
          
          echo "Input branch: ${{ inputs.branch }}"
          echo "Current branch: ${{ github.ref }}"
          echo "Result branch: $CHECKOUT_BRANCH"
          echo "checkout_branch=$CHECKOUT_BRANCH" >> $GITHUB_ENV

      - name: Checkout project
        uses: actions/checkout@v4
        with:
          ref: ${{ env.checkout_branch }}

      - name: Build APKs
        run: ./gradlew ${{ inputs.assemble_task }} ${{ inputs.assemble_android_test_task }}
        env:
          MAVEN_READONLY_TOKEN: ${{ secrets.maven_readonly_token }}
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: ${{ inputs.is_gradle_cache_debug_enabled }}

      - name: Init emulator
        uses: tutu-ru-mobile/github-workflows/action_init_emulator@main

      - name: Start emulators
        continue-on-error: false
        run: |
          set +e -b
          adb start-server
          sleep 20
          emulator @Pixel_8_API_32 \
            -no-audio -no-boot-anim \
            -wipe-data -no-snapshot-save \
            -read-only \
            -change-language ru -change-country RU -change-locale ru-RU \
          & adb -s emulator-5554 wait-for-device \
          & adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 10; done; input keyevent 82' \
          2>&1

          sleep 20

      - name: Run tests
        timeout-minutes: 45
        run: |
          cd ${{ inputs.marathon_path }}
          marathon
        env:
          CLEAR_PACKAGE_DATA: ${{ inputs.marathon_clear_package_data }}
          ONLY_RECORD_SNAPSHOTS: ${{ inputs.marathon_only_record_snapshots }}

      - name: Upload test results
        if: success() && inputs.upload_test_results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.uploaded_artifact_name }}
          path: ${{ inputs.marathon_path }}/build/reports/marathon/device-files/Screenshots

      - name: Send allure report
        id: allure_send_report
        if: (!inputs.marathon_only_record_snapshots) && always()
        run: |
          ALLURE_ARTIFACTS_PATH="send_to_allure"
          rm -rf $ALLURE_ARTIFACTS_PATH
          mkdir $ALLURE_ARTIFACTS_PATH
          
          adb devices
          adb shell "find /sdcard/googletest/test_outputfiles/allure-results \( -name '*.txt' -o -name '*.png' -o -name '*.json' \) -type f -print0" | xargs -0 -I {} adb pull {} $ALLURE_ARTIFACTS_PATH
          ls $ALLURE_ARTIFACTS_PATH
          
          RESULT=$(allurectl launch create --output json ${ALLURE_ARTIFACTS_PATH} \
          --token ${{ secrets.allure_token }} \
          --endpoint "${{ vars.ALLURE_ENDPOINT }}" \
          --project-id ${{ inputs.allure_project_id }} \
          --launch-name "Прогон Android автотестов на CI")
          
          LAUNCH_ID=$(echo "$RESULT" | jq -r '.[0].id')
          echo "launch_id=$LAUNCH_ID" >> $GITHUB_OUTPUT
          
          allurectl upload ${ALLURE_ARTIFACTS_PATH} \
          --launch-id $LAUNCH_ID \
          --token ${{ secrets.allure_token }} \
          --endpoint "${{ vars.ALLURE_ENDPOINT }}" \
          --project-id ${{ inputs.allure_project_id }}
          
          echo "Allure launch is here ${{ vars.ALLURE_ENDPOINT }}/launch/$LAUNCH_ID" >> $GITHUB_STEP_SUMMARY
          
          LAUNCH_INFO=$(allurectl launch get $LAUNCH_ID \
          --token ${{ secrets.allure_token }} \
          --endpoint "${{ vars.ALLURE_ENDPOINT }}" \
          --output json)
          
          # Проверим количество сфейленных и успешных тестов
          COUNT_PASSED_TESTS=$(echo $LAUNCH_INFO \
          | jq '.[0].statistic[] | select(.status=="passed").count')
          
          COUNT_FAILED_TESTS=$(echo $LAUNCH_INFO \
          | jq '.[0].statistic[] | select(.status=="failed").count')
          
          COUNT_BROKEN_TESTS=$(echo $LAUNCH_INFO \
          | jq '.[0].statistic[] | select(.status=="broken").count')
          
          # Проверим количество сфейленных и успешных тестов
          echo "Passed tests count $COUNT_PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "Failed tests count $COUNT_FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "Broken tests count $COUNT_BROKEN_TESTS" >> $GITHUB_STEP_SUMMARY
          
          if { [[ -n $COUNT_FAILED_TESTS ]] && [[ $COUNT_FAILED_TESTS > 0 ]]; } || 
          { [[ -n $COUNT_BROKEN_TESTS ]] && [[ $COUNT_BROKEN_TESTS > 0 ]]; };
          then
          echo "Some tests was failed"
          echo "test_status=failed" >> $GITHUB_OUTPUT
          else
          echo "All tests succeeded"
          echo "test_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Stop measuring workflow duration
        if: ${{ !cancelled() }}
        id: seconds_from_date
        uses: tutu-ru-mobile/github-workflows/action_get_seconds_from_date@main
        with:
          from-date: ${{ steps.pipeline_start_date.outputs.seconds-from-epoch }}

      - if: ${{ !cancelled() }}
        continue-on-error: true
        name: Calculate execution time
        id: runtime
        run: |
          echo "hours=${{ steps.seconds_from_date.outputs.hours-from-date }}" >> $GITHUB_OUTPUT
          echo "minutes=${{ steps.seconds_from_date.outputs.minutes-from-date }}" >> $GITHUB_OUTPUT

      - name: Send workflow telemetry
        continue-on-error: true
        uses: tutu-ru-mobile/send-ci-telemetry@main
        with:
          url: ${{ secrets.telemetry_url }}
          slug: ${{ secrets.telemetry_slug }}
          metrics_name: "test_time_duration"
          metrics_value: ${{ steps.seconds_from_date.outputs.seconds-from-date }}
          metrics_labels: |
            {"os": "android", "app": "${{ inputs.uploaded_app_artifact_name }}", "test_type": "ui"}

      - name: Kill emulators
        if: always()
        run: adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done

  send_tg_notification:
    if: ${{ inputs.send_alert_to_tg && needs.run_ui_tests.outputs.launch_id != '' && !cancelled() }}
    needs: run_ui_tests
    runs-on: tutu-mac-builder
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the commit link and author info
        if: always()
        id: get_info
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-7)
          echo "COMMIT_URL=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_ENV
          echo "SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "AUTHOR_NAME=$(git log -1 --format='%an')" >> $GITHUB_ENV
          if [ -n "${{ github.event.number }}" ]; then
          echo "BRANCH_URL=https://github.com/${{ github.repository }}/pull/${{ github.event.number }}" >> $GITHUB_ENV
          else
          echo "BRANCH_URL=https://github.com/${{ github.repository }}/tree/${{ github.ref }}" >> $GITHUB_ENV
          fi

      - name: Get data from API
        id: get_data
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
            > job.json

      - name: Get job id
        id: get_id
        run: |
          JOB_ID=$(jq '.jobs[0].id' job.json)
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Send message
        uses: tutu-ru-mobile/send-telegram-message@main
        with:
          message_thread_id: ${{ secrets.tg_thread_id }}
          chat_id: ${{ secrets.tg_chat_id }}
          bot_token: ${{ secrets.tg_release_token_id }}
          text: |
            ${{ needs.run_ui_tests.outputs.test_status == 'success' && '✅ BaseTestPlan UI тесты успешно прошли' || '❌ Прогон BaseTestPlan UI тестов упал' }}
            🕐️ Время выполнения: ${{ needs.run_ui_tests.outputs.hours }}ч ${{ needs.run_ui_tests.outputs.minutes }}м
            🔧 Последний коммит: <a href="${{ env.COMMIT_URL }}">${{ env.SHA }}</a>
            🌳 Ветка: <a href="${{ env.BRANCH_URL }}">${{ github.ref_name }}</a>
            🧚‍ Автор: ${{ env.AUTHOR_NAME }}
          button1_title: "Logs"
          button1_url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          button2_title: ${{ needs.run_ui_tests.outputs.test_status == 'success' && '✅ Allure' || '❌ Allure' }}
          button2_url: https://allure.tutu.ru/launch/${{ needs.run_ui_tests.outputs.launch_id }}