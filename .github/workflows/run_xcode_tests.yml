name: Run Xcode tests

on:
  workflow_call:
    outputs:
      TESTS_STATUS:
        value:  ${{ jobs.run_xcode_tests.outputs.JOB_TESTS_RESULT }}
    inputs:
      is_run_xcodegen:
        description: '`true` is for run xcodegen'
        default: false
        type: boolean
        required: false
      workspace_name:
        description: 'Path to workspace file'
        type: string
        required: true
      scheme_name:
        description: 'Scheme name to run'
        type: string
        required: true
      xcresult_name:
        description: 'File bundle path to save xcresult'
        type: string
        required: true
      is_collect_issues:
        description: '`true` for collect issues and show via Danger'
        type: boolean
        default: false
        required: false
      dangerfile_name:
        description: 'Path to Dangerfile'
        type: string
        required: false
    secrets:
      github_access_token:
        required: true
      ssh_private_key:
        required: true

jobs:
  run_xcode_tests:
    outputs:
      JOB_TESTS_RESULT: ${{ steps.step1.outputs.TESTS_STATUS }}
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'record') }}
    runs-on: macos-12
    continue-on-error: true
    strategy:
      matrix:
        destination: ['platform=iOS Simulator,name=iPhone 11']
        swift: ["5.5"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0
      - name: Setup SSH
        uses: tutu-ru-mobile/github-action-ssh-agent@v1.1.0-tutu
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}
      - name: Change origin to ssh link
        run: git remote set-url origin git@github.com:$GITHUB_REPOSITORY.git
      - uses: tutu-ru-mobile/github-workflows/action_select_xcode_version@v1.0.5
      - uses: tutu-ru-mobile/github-workflows/action_install_dependencies@v1.0.5
      - uses: tutu-ru-mobile/github-workflows/action_restore_cache_cocoapods@v1.0.5
      - if: ${{ inputs.is_run_xcodegen }}
        name: Generate xcodeproj
        run: |
          make install-xcodegen
          make generate-xcodeproj
      - name: Create ci tag
        run: touch .ci_tag
      - name: Compile and Test
        timeout-minutes: 90
        run: |
            xcodebuild clean test \
            -skipPackagePluginValidation \
            -workspace ${{ inputs.workspace_name }} \
            -scheme ${{ inputs.scheme_name }} \
            -destination "${destination}" \
            -resultBundlePath '${{ inputs.xcresult_name }}' \
            -retry-tests-on-failure \
            -test-iterations 5 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=NO \
        env:
           destination: ${{ matrix.destination }}
      - name: Remove ci tag
        run: rm .ci_tag
      - if: ${{ inputs.is_collect_issues }}
        continue-on-error: true
        name: Collect issues
        uses: MeilCli/danger-action@v5
        with:
          plugins_file: 'Gemfile'
          install_path: 'vendor/bundle'
          danger_file: ${{ inputs.dangerfile_name }}
          danger_id: 'danger-pr'
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.github_access_token }}
      - name: save tests_results
        uses: actions/upload-artifact@v2
        with:
          name: tests_results
          path: tests_results
          retention-days: 10
      - name: save xcresults
        uses: actions/upload-artifact@v2
        with:
          name: xcresults
          path: output/derived_data/Logs/Test
      - id: step1
        run: |
          if [ $? -eq 0 ]; then
            echo "All tests passed!"
            echo "TESTS_STATUS=success" >> $GITHUB_ENV
          else
            echo "Some tests failed."
            echo "TESTS_STATUS=failed" >> $GITHUB_ENV
          fi
      - name: Check status env variable
        run: printenv
